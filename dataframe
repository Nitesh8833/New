# ───────────────────────── constants (add / replace) ─────────────────────────
BUSINESS_OWNER_COL = "Business Team"          # friendly name after header-rename

SHEET2_COLS_WITH_OWNER = [
    BUSINESS_OWNER_COL,
    "# New Roster Formats",
    "# Changed Roster Formats",
    "# of Rosters with no Set up or Format Change",
    "# Complex Rosters",
    "All Rosters",
]

# ──────────── REPLACE the whole write_two_sheet_excel_gcs function ───────────
def write_two_sheet_excel_gcs(df: pd.DataFrame, gcs_uri: str) -> None:
    """
    Sheet 1 = detail rows      (SHEET1_COLS)
    Sheet 2 = one row per team (BUSINESS_OWNER_COL + KPI columns)
    Upload to GCS.
    """
    try:
        from google.cloud import storage
    except ImportError:
        raise ImportError("pip install google-cloud-storage") from None

    # -------- Sheet 1  (detail, row-level) --------
    df1 = df.reindex(columns=[c for c in SHEET1_COLS if c in df.columns])

    # -------- Sheet 2  (aggregated by Business Team) --------
    missing_owner = BUSINESS_OWNER_COL not in df.columns
    if missing_owner:
        raise ValueError(
            f"Column '{BUSINESS_OWNER_COL}' not present after friendly-headers step."
        )

    kpi_cols = [c for c in SHEET2_COLS_WITH_OWNER if c != BUSINESS_OWNER_COL]
    # group, take first() – values identical per team
    df2 = (
        df.groupby(BUSINESS_OWNER_COL, dropna=False)[kpi_cols]
          .first()
          .reset_index()
          .reindex(columns=SHEET2_COLS_WITH_OWNER)
    )

    # -------- Write workbook to memory --------
    buf = io.BytesIO()
    with pd.ExcelWriter(buf, engine="openpyxl") as writer:
        df1.to_excel(writer, sheet_name=SHEET1_NAME, index=False)
        autosize_and_freeze(writer.sheets[SHEET1_NAME], df1)

        df2.to_excel(writer, sheet_name=SHEET2_NAME, index=False)
        autosize_and_freeze(writer.sheets[SHEET2_NAME], df2)

    buf.seek(0)

    # -------- Upload to GCS --------
    if not gcs_uri.startswith("gs://"):
        raise ValueError("OUT_URI must start with 'gs://'")

    bucket_name, blob_name = gcs_uri[5:].split("/", 1)
    client = storage.Client()
    bucket = client.bucket(bucket_name)
    bucket.blob(blob_name).upload_from_file(
        buf,
        content_type=(
            "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"
        ),
    )
    print(f"[INFO] Uploaded Excel with summary+KPI sheets → {gcs_uri}")
